{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["quotes","quote","author","getRandomInt","max","Math","floor","random","Tweet","props","react_default","a","createElement","Button","variant","className","id","href","concat","tweet","rel","target","index_es","icon","faTwitter","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","index","length","state","console","log","setState","prevState","Jumbotron","faQuoteLeft","size","onClick","App_Tweet","encodeURI","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAOMA,EAAS,CACb,CACEC,MAAO,qCACPC,OAAQ,gBAEV,CACED,MAAO,yHACPC,OAAQ,cAEV,CACED,MAAO,oCACPC,OAAQ,SAEV,CACED,MAAO,4JACPC,OAAQ,qBAEV,CACED,MAAO,+EACPC,OAAQ,gBAEV,CACED,MAAO,+BACPC,OAAQ,eAEV,CACED,MAAO,gHACPC,OAAQ,oBAEV,CACED,MAAO,+EACPC,OAAQ,mBAEV,CACED,MAAO,wLACPC,OAAQ,cAEV,CACED,MAAO,4DACPC,OAAQ,gBAINC,EAAe,SAASC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAGzCI,EAAQ,SAAAC,GACZ,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAQ,gBAAgBC,UAAU,iBACxCL,EAAAC,EAAAC,cAAA,KACEI,GAAG,cACHC,KAAM,uCAAuCC,OAAOT,EAAMU,OAC1DC,IAAI,sBACJC,OAAO,UAETX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAiBC,KAAMC,SA2DdC,cApDb,SAAAA,EAAYhB,GAAO,IAAAiB,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KAEDwB,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAEnB,IAAIU,EAAQjC,EAAaH,EAAOqC,QALf,OAOjBX,EAAKY,MAAQ,CACXrC,MAAOD,EAAOoC,GAAOnC,MACrBC,OAAQF,EAAOoC,GAAOlC,QATPwB,6EAcjBa,QAAQC,IAAI,SACZ,IAAIJ,EAAQjC,EAAaH,EAAOqC,QAChC,GACED,EAAQjC,EAAaH,EAAOqC,cAEvBR,KAAKS,MAAMrC,QAAUD,EAAOoC,GAAOnC,OAE1C4B,KAAKY,SAAS,SAAAC,GAAS,MAAK,CAC1BzC,MAAOD,EAAOoC,GAAOnC,MACrBC,OAAQF,EAAOoC,GAAOlC,2CAKxB,OACEQ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAW3B,GAAG,aACZN,EAAAC,EAAAC,cAAA,cAAYG,UAAU,cACpBL,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAiBC,KAAMqB,IAAaC,KAAK,OAD3C,IACkDnC,EAAAC,EAAAC,cAAA,QAAMI,GAAG,QAAQa,KAAKS,MAAMrC,QAE9ES,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAf,KACIL,EAAAC,EAAAC,cAAA,QAAMI,GAAG,UAAUa,KAAKS,MAAMpC,SAElCQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQG,GAAG,YAAYF,QAAQ,gBAAgBgC,QAASjB,KAAKI,aAA7D,aACAvB,EAAAC,EAAAC,cAACmC,EAAD,CACE5B,MAAO6B,UACL,yBACC9B,OAAOW,KAAKS,MAAMrC,OAClBiB,OAAO,KACPA,OAAOW,KAAKS,MAAMpC,oBA5Cf+C,IAAMC,WCzDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79641cca.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Jumbotron, Button} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n\nconst quotes = [\n  {\n    quote: \"Get busy living or get busy dying.\",\n    author: \"Stephen King\"\n  },\n  {\n    quote: \"Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do.\",\n    author: \"Mark Twain\"\n  },\n  {\n    quote: \"Love is a serious mental disease.\",\n    author: \"Plato\"\n  },\n  {\n    quote: \"It had long since come to my attention that people of accomplishment rarely sat back and let things happen to them. They went out and happened to things.\",\n    author: \"Leonardo Da Vinci\"\n  },\n  { \n    quote: \"It is our choices, that show what we truly are, far more than our abilities.\", \n    author: \"J. K Rowling\" \n  },\n  {\n    quote: \"If you want to be happy, be.\",\n    author: \"Leo Tolstoy\"\n  },\n  {\n    quote: \"Many of life’s failures are people who did not realize how close they were to success when they gave up.\",\n    author: \"Thomas A. Edison\"\n  },\n  {\n    quote: \"If you want to live a happy life, tie it to a goal, not to people or things.\",\n    author: \"Albert Einstein\"\n  },\n  {\n    quote: \"Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma – which is living with the results of other people’s thinking.\",\n    author: \"Steve Jobs\"\n  },\n  {\n    quote: \"Always forgive your enemies; nothing annoys them so much.\",\n    author: \"Oscar Wilde\"\n  }\n];\n\nconst getRandomInt = function(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\nconst Tweet = props => {\n  return (\n    <Button variant=\"outline-light\" className=\"twitterButton\">\n      <a \n        id=\"tweet-quote\" \n        href={\"https://www.twitter.com/intent/tweet\".concat(props.tweet)} \n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n      >\n      <FontAwesomeIcon icon={faTwitter} />\n      </a>\n    </Button>\n  );\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n\n    let index = getRandomInt(quotes.length);\n\n    this.state = {\n      quote: quotes[index].quote,\n      author: quotes[index].author\n    };\n  }\n\n  handleClick() {\n    console.log(\"Click\");    \n    let index = getRandomInt(quotes.length);\n    do {\n      index = getRandomInt(quotes.length);\n    }\n    while (this.state.quote === quotes[index].quote)\n             \n    this.setState(prevState => ({\n      quote: quotes[index].quote,\n      author: quotes[index].author\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron id=\"quote-box\">\n          <blockquote className=\"quote-text\">\n            <FontAwesomeIcon icon={faQuoteLeft} size=\"2x\"/> <span id=\"text\">{this.state.quote}</span>\n          </blockquote>\n          <div className=\"quote-author\">\n            - <span id=\"author\">{this.state.author}</span>\n          </div>\n          <Button id=\"new-quote\" variant=\"outline-light\" onClick={this.handleClick}>New quote</Button> \n          <Tweet\n            tweet={encodeURI(\n              \"?hashtags=quotes&text=\"\n              .concat(this.state.quote)\n              .concat(\" \")\n              .concat(this.state.author)\n            )}\n          />\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}